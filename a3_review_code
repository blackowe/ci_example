# snippet 1
def my_func(x, y):

    return x**y


# snippet 1 - corrected code
def calc_exponents(base, power):
    """Calculates exponents using 'base' and 'power' value inputs.

    Args:
        base(int): The value to be multipled by 'power' number of times.
        power(int): The amount of times 'base' will be multiples by itself.
    Returns:
        The computation result of base^power
    """
    return base**power
# ---------------------------------------------------------------
# snippet #2 # Pull request 2
def create_odds(num):
    """Creates a list of len(num) of random odd numbers between 1 and 1000"""
    num_list = []
    for i in range(0, num):
        new_num = 2
        while new_num % 2 == 0:
            new_num = random.randint(1, 10)
        num_list.append(new_num)
    return num_list


def create_evens(num):
    """Creates a list of len(num) of random even numbers between 1 and 1000"""
    num_list = []
    for i in range(0, num):
        new_num = 1
        while new_num % 2 != 0:
            new_num = random.randint(1, 10)
        num_list.append(new_num)
    return num_list


global max_value
global min_value

# set max_value & min_values
max_value = 10
min_value = 1

def get_odd_int():
    return random.randrange(min_value, max_value + 1, step=2)

# does not generate random numbers without bias?
def get_even_int():
    return random.randint(min_value // 2 + 1, max_value // 2) * 2


def create_list(list_len, is_odd):
    num_list = [get_odd_int() if is_odd
                else get_even_int() for i in range(list_len)]
    return num_list

print(create_list(15, False))
print(create_list(15, True))



# -------------------------------------------------------------------------------
# snippet 3 - revised code: use in operator built-in, add Class
class SomeClass:
    def __init__(self, values):
        self.values = values
# Pull request 3
def check_for_val(self, val):
    """This member function checks to see if val exists in the class member
    values and returns True if found"""
    return val in self.values
    
m1 = SomeClass([91,33,45,66])
print(check_for_val(m1, 33))

# ------------------------------------------------------------------------------
# Snippet 4 - revised code: use the .index() built-in
def get_val_index(arr, val):
    """Searches arr for val and returns the index if found, otherwise -1"""
    Args:
        arr(list): An array of integers which will be searched
        val(int): An integer value that will be the target of the search
    Returns:
        An index(int) position within the 'arr' where the target value is located, or -1 if value not found.
    """
    try: return arr.index(val)
    except ValueError: return -1

# -------------------------------------------------------------------------------
# snippet 5 - revised code: use list comprehension + sorted() fx to return copy of arr
# Pull request 5
def double_array(arr):
    """sort the list (ascending) and double the value of each element of
       the list and return without changing the state of the original list"""
    Args:
        arr(list): An array of integers
    Returns:
        An array of integers ascendingly sorted with values doubled from the original array.
    """
    # use list comprehension + sorted() to create copy of arr
    return sorted(val*2 for val in arr)

print(double_array([10,9,8,7,6,5,4,3,2,1,0]))

